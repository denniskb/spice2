#include "spice/snn.h"

#include "matplot.h"

using namespace spice;
using namespace spice::util;

/*
This sample illustrates how external input (such as from a file or stream)
can be fed into a SNN.
*/

// Once again, for simplicity, we hard-code our spike-train.
// This could just as easily come from a file or an event-camera stream.
std::vector<Int32> spikes[] = {{4, 5, 8}, {5}, {7, 8}, {5, 7}};

struct input {
	Int i = 0;

	// All you have to do, is write a neuron description with the following update() method.
	// It accepts a DT, and rng, and a spike output buffer.
	// Your job is to fill the buffer with all the spikes generated by the 'input' population
	// in the current simulation step, aka "per-population update".
	// Please note, you can only define either a per-population update() method OR a
	// per-neuron update() method but not both, as otherwise it would be ambigious what you want to do.
	void update(float, auto, std::vector<Int32>& out_spikes) {
		out_spikes.insert(out_spikes.end(), spikes[i].begin(), spikes[i].end());
		i = (i + 1) % 4;
	}
};
static_assert(CheckNeuron<input>());

int main() {
	snn single_pop(1, 1, {1337});
	auto I = single_pop.add_population<input>(9);

	spike_output_stream s("external_input");
	for (Int i : range(20)) {
		single_pop.step();
		s << I << '\n';
		pause(0.1);
		(void)i;
	}
	return 0;
}